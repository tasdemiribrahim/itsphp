DefaultLanguage tr
AddDefaultCharset UTF-8
SetEnv TZ EST
SetEnv nokeepalive

DirectoryIndex index.php /index.php index.html /index.html

AddEncoding x-compress .Z
AddEncoding x-gzip .gz .tgz .tar.gz

php_flag register_globals off
php_flag short_open_tag off
php_flag safe_mode on

ServerSignature Off
Header unset Pragma
FileETag None
Header unset ETag

Options All -Indexes

#Action watermark /cgi-bin/watermark.cgi
#AddHandler watermark .gif .jpg

#
# These are equivalent, and return a response with a 302 status.
#
#Redirect      /foo.html http://example.com/under-construction/foo.html
#Redirect temp /foo.html http://example.com/under-construction/foo.html
#RedirectTemp  /foo.html http://example.com/under-construction/foo.html
#
# These are equivalent to each other as well, returning a 301 status
#
#Redirect permanent /foo.html http://example.com/relocated/foo.html
#RedirectPermanent  /foo.html http://example.com/relocated/foo.html
#
# This tells the client that the old URL is dead, but the document
# content has been replaced by the specified new document.  It
# returns a 303 status.
#
#Redirect seeother /foo.html http://example.com/relocated/bar.html
#
# Returns a 410 status, telling the client that the document has been
# intentionally removed and won't be coming back.  Note that there
# is no absoluteURL argument.
#
#Redirect gone     /foo.html

# Alias "/newurl" "/www/htdocs/oldurl"

errordocument 400 /error/Error.php?err=400
errordocument 401 /error/Error.php?err=401
errordocument 403 /error/403.shtml
errordocument 404 /error/Error.php?err=404
errordocument 405 /error/Error.php?err=405
errordocument 408 /error/Error.php?err=408
errordocument 410 /error/Error.php?err=410
errordocument 411 /error/Error.php?err=411
errordocument 412 /error/Error.php?err=412
errordocument 413 /error/Error.php?err=413
errordocument 414 /error/Error.php?err=414
errordocument 415 /error/Error.php?err=415
errordocument 500 /error/Error.php?err=500
errordocument 501 /error/Error.php?err=501
errordocument 502 /error/Error.php?err=502
errordocument 503 /error/Error.php?err=503
errordocument 506 /error/Error.php?err=506

AddType video/ogg  ogv
AddType video/mp4  mp4
AddType video/webm webm
AddType image/svg+xml svg svgz 
AddType application/vnd.ms-fontobject eot
AddType font/ttf ttf
AddType font/otf otf
AddType font/x-woff woff
AddType text/x-component htc
AddType text/plain ini sh bsh bash awk nawk gawk csh var c in h asc md5 sha sha1
AddType text/cache-manifest manifest

AddHandler cgi-script .cgi

AddOutputFilter Includes shtml

<IfModule mod_python.c>
	AddHandler mod_python .py
	PythonHandler mod_python.publisher
	PythonDebug On
</IfModule>

<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/x-javascript text/javascript application/javascript application/json 
  <FilesMatch "\.(ttf|otf|woff|eot|svg|svgz)$" >
    SetOutputFilter DEFLATE
  </FilesMatch>
</IfModule>

<ifModule mod_gzip.c>
  mod_gzip_on Yes
  mod_gzip_dechunk Yes
  mod_gzip_item_include file \.(html?|txt|css|js|php|pl)$
  mod_gzip_item_include handler ^cgi-script$
  mod_gzip_item_include mime ^text/.*
  mod_gzip_item_include mime ^application/x-javascript.*
  mod_gzip_item_exclude mime ^image/.*
  mod_gzip_item_exclude rspheader ^Content-Encoding:.*gzip.*
</ifModule>

<IfModule mod_expires.c>
	Header set cache-control: public
	ExpiresActive on
	ExpiresDefault "access plus 52 weeks"
	#ExpiresByType text/cache-manifest "access plus 0 seconds"
	<FilesMatch "\.(php|html|htm|xml|txt|xsl|rdf|rss)$">
		ExpiresDefault A3600
	</FilesMatch>
</IfModule>

SetEnvIfNoCase Request_URI \.(og[gav]|mp4|m4a|webm)$ no-gzip dont-vary
 
<FilesMatch "\.(html|htm|php)$">
Header set imagetoolbar "no"
</FilesMatch>

<ifmodule mod_php4.c>
php_flag magic_quotes_gpc off
</ifmodule>

<files ".htaccess">
	order allow,deny
	deny from all
</files>

<IfModule mod_setenvif.c>
  <IfModule mod_headers.c>
    BrowserMatch MSIE ie
    Header set X-UA-Compatible "IE=Edge" env=ie
    BrowserMatch chromeframe gcf
    Header append X-UA-Compatible "chrome=1" env=gcf
  </IfModule>
</IfModule>

<IfModule mod_php5.c>
    <FilesMatch "\.ph(ar|p3?|tml)$">
      SetHandler application/x-httpd-php
	</FilesMatch>
</IfModule>

<IfModule security2_module>
	# Turn on rule engine and set default action
	SecRuleEngine On
	SecDefaultAction "phase:2,deny,log,status:403,t:removeNulls"

	# Enable serial audit logging
	SecAuditEngine RelevantOnly
	SecAuditLogRelevantStatus ^[45]
	SecAuditLog logs/modsec_audit.log
	SecAuditLogType serial
	SecAuditLogParts ABCFHZ

	# Configure request body access and limits
	SecRequestBodyAccess On
	# Debug log settings
	SecDebugLog error/modsec_debug.log
	SecDebugLogLevel 0

	SecRule ARGS_NAMES password allow,auditlog,sanitiseMatched
	SecAction phase:1,allow:phase,sanitiseRequestHeader:Cookie,nolog

	SecRule REQUEST_HEADERS:User-Agent "WebVulnScan" "phase:1"
	SecRule REQUEST_FILENAME "\.(?:jpe?g|gif|png|js|exe|mp3|ogg|css)$" "phase:1,allow"

	# Block all requests that have the string "secret" in the URI
	SecRule REQUEST_URI "secret"

	#
	# Defeat HTTP fingerprinting
	#
	# Change server signature
	SecServerSignature "Microsoft-IIS/6.0"
	# Deny requests without a host header
	SecRule &REQUEST_HEADERS:Host "@eq 0" "phase:1,deny"
	# Deny requests without an accept header
	SecRule &REQUEST_HEADERS:Accept "@eq 0" "phase:1,deny"
	# Deny request that don't use GET, HEAD or POST
	SecRule REQUEST_METHOD !^(get|head|post)$ "phase:1,t:lowerCase,deny"
	# Only allow HTTP version 1.0 and 1.1
	SecRule REQUEST_PROTOCOL !^http/1\.(0|1)$ "phase:1,t:lowercase,deny"
	# Add X-Powered-By header to mimic IIS
	Header set X-Powered-By "ASP.NET 4.0"


	SecRule REQUEST_HEADERS:User-Agent "[Dd]ownloader" "deny,nolog"
	# SecRule &REQUEST_HEADER:User-Agent "@eq 0"

	SecRule ARGS "<script" "deny,t:lowercase"

	SecRule ARGS:login "@validateByteRange 48-57, 65-90, 97-122, 45, 95"
	SecRule ARGS:aileID "@validateByteRange 48-57"
	SecRule ARGS:grupID "@validateByteRange 48-57"
	SecRule ARGS:filmID "@validateByteRange 48-57"

	SecRule REMOTE_ADDR "^192\." "pass,log,logdata:'Suspicious IP address'"
	#SecRule TIME_HOUR !^(8|9|10|11|12|13|14|15|16|17)$ deny
	SecRule RESPONSE_BODY "@verifyCC \d{13,16}" "phase:4,deny,t:removeWhitespace,log,msg:'Possible credit card number leak detected'"

	SecGeoLookupDb "/usr/local/geoip/GeoIP.dat"
	# Block users from China, Russia and Pakistan
	SecRule REMOTE_ADDR "@geoLookup" "deny,nolog,chain"
	SecRule GEO:COUNTRY_CODE "@pm CN RU PK"

	## Redirect European visitors to EU server
	#SecRule REQUEST_URI "^/download/(.*)$" "phase:1,capture,chain, redirect:http://europe.example.com/download/%{TX.1}"
	#SecRule REMOTE_ADDR "@geoLookup" "chain"
	#SecRule GEO:COUNTRY_CONTINENT "@streq EU"

	SecAction "initcol:ip=%{REMOTE_ADDR},pass,nolog"
	SecRule REQUEST_METHOD "@streq POST" "pass,setvar:ip.posts_made=+1,expirevar:ip.posts_made=12"
	SecRule IP:POSTS_MADE "@gt 5" "pause:5000"

	SecRule ARGS "drop|delete" "deny,t:lowercase, setenv:HOSTNAME=%{SERVER_NAME}, setenv:REMOTEIP=%{REMOTE_ADDR}, setenv:REQUESTURI=%{REQUEST_URI}, setenv:ARGS=%{ARGS}, setenv:UNIQUEID={%UNIQUE_ID}, exec:error/email.sh"

	SecRule REQUEST_URI "^/File.zip$" "phase:5,chain,pass,nolog" 
	SecRule RESPONSE_STATUS 200 "exec:error/download.sh"

	# Initialize IP collection
	SecAction "initcol:ip=%{REMOTE_ADDR},pass,phase:1"
	# Track accesses to the protected resource
	SecRule REQUEST_URI "^/protected/" "pass,phase:1,setvar:ip.attempts=+1,expirevar:ip.attempts=600"
	# Was this an authenticated access? (Chained rule)
	SecRule REQUEST_URI "^/protected/" "chain,pass,phase:3"
	# Yes, user is logged in, set counter to 0
	SecRule RESPONSE_STATUS "^2..$" "setvar:ip.attempts=0"
	# Block if more than 5 non-authenticated access attempts
	SecRule IP:ATTEMPTS "@gt 5" "phase:1,deny"

	SecRule ARGS:aileID "%" "phase:1,allow,t:urlDecode,append:'<script type=text/javascript>alert(\"Stop trying to hack our site!\");</script>',log,msg:'Potential intrusion detected'"

	# http://www.clamav.net
	SecUploadDir main/images/temp/modsecurity
	SecTmpDir main/images/temp/modsecurity
	SecRule FILES_TMPNAMES "@inspectFile error/filescan.sh" "phase:2,deny,status:418"

	<Location /main/login>
		SecRule \' deny
		SecRule ARGS_NAMES "!^(login|sifre|recaptcha_challenge_field|recaptcha_response_field|myspace|myspace_pass)$" "t:lowercase,deny"
	</Location>

	SecRule REQUEST_HEADERS:Authorization "Basic (.*)" "phase:1,deny,chain,capture"
	SecRule TX:1 "!^[-a-zA-Z0-9_]+:[-a-zA-Z0-9_]+$" "t:base64Decode"

	SecRule &REQUEST_HEADERS:X-Forwarded-For "@gt 0" deny

	SecPdfProtect On
	SecPdfProtectMethod TokenRedirection
	SecPdfProtectSecret "SecretString"
	SecPdfProtectTimeout 10

	# SecRule ARGS "(rm|ls|kill|(send)?mail|cat|echo|/bin/|/etc/|/tmp/)" "deny"

	# Prevent PHP source code from being disclosed
	SecRule RESPONSE_BODY "<?" "deny,msg:'PHP source code disclosure blocked'"

	# Prevent Perl source code from being disclosed
	SecRule RESPONSE_BODY "#!/usr/bin/perl" "deny,msg:'Perl source code disclosure blocked'"
	# Prevent JSP source code from being disclosed
	SecRule RESPONSE_BODY "<%" "deny,msg:'JSP source code disclosure blocked'"

	SecRule REQUEST_URI "../" "t:urlDecode,deny"

	SecRule ARGS "(into\s+outfile|union\s+select|union\s+all\s+select|drop\s+table|alter\s+table|load_file|select\s+*)" "t:lowercase,deny,msg:'SQL Injection'"

	#
	# Block further login attempts after 3 failed attempts
	#
	#<LocationMatch ^/login>
		# Initalize IP collection with user's IP address
	#	SecAction "initcol:ip=%{REMOTE_ADDR},pass,nolog"
		# Detect failed login attempts
	#	SecRule RESPONSE_BODY "Username does not exist" "phase:4,pass,setvar:ip.failed_logins=+1,expirevar:ip.failed_logins=60"
		# Block subsequent login attempts
	#	SecRule IP:FAILED_LOGINS "@gt 3" deny
	#</Location>

	#
	# Prevent directory listings from accidentally being returned
	#
	SecRule REQUEST_URI "/$" "phase:4,deny,chain,log,msg:'Directory index returned'"
	SecRule RESPONSE_BODY "<h1>Index of /"

	SecRule ARGS "/etc/passwd" "pass,redirect:error/403.shtml"

	# mkdir –p /chroot/etc/httpd/run
	# mkdir –p /chroot/var/run
	# chown -R apache:apache /chroot
	# mkdir –p /chroot/var/www
	# cp –R /var/www /chroot/var/
	# ln -s /chroot/var/run/httpd.pid /var/run/httpd.pid
	# SecChrootDir /chroot

	## Positive Security
	# <Location /admin/>
	# SecRule REQUEST_COOKIES_NAMES "!^Y2(Pass|Sess|User)-10491$" "deny"
	# SecRule REQUEST_COOKIES:Y2Pass-10491 "!^[0-9a-zA-Z]+$" "deny"
	# SecRule REQUEST_COOKIES:Y2Sess-10491 "!^[0-9a-zA-Z]+$" "deny"
	# SecRule REQUEST_COOKIES:Y2User-10491 "!^[-_0-9a-zA-Z+.]+$" "deny"
	# SecRule REQUEST_HEADERS_NAMES "!^(Accept|Referer|Accept-Language|Content-Type|Content-Length|Cookie|User-Agent|Accept-Encoding|Host|Connection|Pragma|If-Modified-Since|If-None-Match)$" "deny"
	# Header check
	# SecRule REQUEST_HEADERS_NAMES "!^(Accept|Referer|Accept-Language|Content-Type|Content-Length|Cookie|User-Agent|Accept-Encoding|Host|Connection|Pragma|If-Modified-Since|If-None-Match)$" "deny,msg:'Unknown request header'"
	# SecRule REQUEST_HEADERS:Accept "!^[-\w\s*/,.]+$" "deny, msg:'Bad Accept header'"
	# SecRule REQUEST_HEADERS:Referer "!^[-\w\s*/:^.?=~;]+$" "deny,msg:'Bad Referer header'"
	# SecRule REQUEST_HEADERS:Accept-Language "!^[-\w*/]+$" "deny,msg:'Bad Accept-Language header'"
	# SecRule REQUEST_HEADERS:User-Agent "!^[-\w\s*/:;\.,()=]+$" "deny,msg:'Bad User-Agent header'"
	# SecRule REQUEST_HEADERS:Content-Type "!^[-\w\s*/:;\.,()=]+$" "deny,msg:'Bad Content-Type header'"
	# SecRule REQUEST_HEADERS:Content-Length "!^[\d]{1,20}$" "deny,msg:'Bad Content-Length header'"
	# SecRule REQUEST_HEADERS:Accept-Encoding "!^[-\w\s*/:;\.,()]+$" "deny,msg:'Bad Accept-Encoding header'"
	# SecRule REQUEST_HEADERS:Host "!^[\w\.]+$" "deny,msg:'Bad Host header'"
	# SecRule REQUEST_HEADERS:Connection "!^[-\w]+$" "deny,msg:'Bad Connection header'"
	# SecRule REQUEST_HEADERS:Pragma "!^[-\w*/]+$" "deny,msg:'Bad Pragma header'"
	# SecRule REQUEST_HEADERS:If-Modified-Since "!^[-\w*/]+$" "deny,msg:'Bad If-Modified-Since header'"
	# SecRule REQUEST_HEADERS:If-None-Match "!^[-\w*/]+$" "deny,msg:'Bad If-None-Match header'"
	# SecRule REQUEST_HEADERS:Cookie "!^[-\w\s=*/;]+$" "deny,msg:'Bad Cookie header'"
	# SecRule ARGS:foo "!^bar$" "deny"
	# SecRule ARGS_NAMES "!^foo$" "deny"
	# SecRule ARGS:action "^post$" "pass,skipAfter:100"
	# SecRule ARGS:action "^search$" "pass,skipAfter:101"
	## If we get to this point then an unknown action has
	## been found, and the request is blocked
	# SecAction "deny,msg:'Unknown action'"
	# SecMarker 100
	## Rules for "post" action go here
	# SecAction "pass,skipAfter:9999"
	# SecMarker 101
	## Rules for "search" action go here
	# SecAction "pass,skipAfter:9999"
	# SecMarker 9999
	## This is where we jump after we have finished all checks
	# </Location>
</IfModule>

<IfModule mod_evasive.c>
	DOSPageCount        2
	DOSPageInterval     1
	DOSSiteCount        50
	DOSSiteInterval     1
	DOSBlockingPeriod   10
</IfModule>
 
RewriteEngine On
RewriteCond %{REQUEST_METHOD} !^(GET|HEAD|POST)$ [NC]
RewriteRule .* - [F,NS,L]

RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
RewriteRule ^(.*)$ http://%1/$1 [R=301,L]

RewriteCond %{SCRIPT_FILENAME} !-d
RewriteRule ^([^\.]+)$ $1.php [NC,L]

RewriteCond "%{HTTPS}" "!=on"
RewriteRule "^(/main/admin/.*)" "https://%{HTTP_HOST}$1" [R,L]

#prevent hot-linkin
#RewriteCond "%{HTTP_REFERER}" !=""
#RewriteCond "%{HTTP_REFERER}" "!^http://mysite.com/.*$" [NC]
#RewriteRule "\.(jpg|gif|png)$ - [F]

#prevent partial download
#RewriteCond "%{HTTP:RANGE}" "."
#RewriteRule "(.*)" "/error/range-disallowed.cgi" [L,PT]

RewriteCond "%{HTTP_HOST}" "^$"
RewriteRule "(.*)" "/error/Error.php?err=400&$1" [PT]
